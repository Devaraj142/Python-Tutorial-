Python 3.10.4 (tags/v3.10.4:9d38120, Mar 23 2022, 23:13:41) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> #CONTROL FLOW STATEMENTS
>>> #if statements for well-known statement for other language programmers who known about C,CPP,Java, etc., it is the statement like you have options to run the body of code if the given condition is true, let's see an example
>>> if 6%2==0:
...     print("6 is even number")
...
6 is even number
>>> if 3%2==0:
...     print("6 is even number")
... else:
...     print("6 is even number")
...
6 is even number
>>> if 3%2==0:
...     print("3 is even number")
... else:
...     print("3 is not a even number")
...
3 is not a even number
>>> #here from the above example we see that if the statement is correct it will run the body of it's code and the other example if the statement is correct it will run the body of it's code or else the else block of code will run
>>> #there is another option to solve the multiple condition statement to check the code constrain
ts like how the switch case does, it will known as if...elif...else... , let's see the example for
that
>>> n=0
>>> if n>0:
...     print(n," is a positive number")
... elif n<0:
...     print(n," is a negative number")
... elif n==1:
...     print(n," is One")
... else:
...     print(n," is Zero)
  File "<stdin>", line 8
    print(n," is Zero)
            ^
SyntaxError: unterminated string literal (detected at line 8)
>>> if n>0:
...     print(n," is a positive number")
... elif n<0:
...     print(n," is a negative number")
... elif n==1:
...     print(n," is One")
... else:
...     print(n," is Zero")
...
0  is Zero



>>> #for loop is differ from the other programming languages like c,cpp,java,pascal,etc., In Cfor loop has a ability to define both the iteration step and halting condition but in the python's for statement iterates over the item of any sequence in the order that they print in the sequence, a list or a string For Example
>>> name=["C", "CPP", "Java", "Python", "JavaScript", "Php"]
>>> for i in name:
...     print(i)
...
C
CPP
Java
Python
JavaScript
Php
>>> #this is how for loop work's for example let me put this in a simple english word terms, like
>>> for each in name:
...     print(each)
...
C
CPP
Java
Python
JavaScript
Php
>>> #using for loop let we print the each items in the sequence order what exactly in the user
 defined over in the variable 'name'
>>> for each in name:
...     print(each, len(each))
...
C 1
CPP 3
Java 4
Python 6
JavaScript 10
Php 3
>>> #using this we can modify the code, sometimes it's too tricky to copy a collection or to c
reate a new collection while iterating,
>>> users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}
>>> #iterate over a copy
>>> for user,status in users.copy().items():
...     if status == 'inactive':
...             del users[user]
...
>>> users
{'Hans': 'active', '景太郎': 'active'}
>>> #also we can create a new collection of items
>>> for user, status in users.items():
...     if status == 'active':
...             active_users[user]=status
...
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
NameError: name 'active_users' is not defined
>>> active_users = {}
>>> for user, status in users.items():
...     if status == 'active':
...             active_users[user]=status
...
>>> active_users
{'Hans': 'active', '景太郎': 'active'}
>>> #using for loop you can also iterate some string
>>> example = 'python'
>>> for each in example:
...     print(i)
...
Php
Php
Php
Php
Php
Php
>>> #sorry i used 'i' instead of each
>>> for each in example:
...     print(each)
...
p
y
t
h
o
n



>>> #before the next control statement you need to known the built-in function called, range()let's how to use range() while coding
>>> for i in range(5):
...     print(i)
...
0
1
2
3
4
>>> #If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy
>>> #The created sequence never includes the supplied end point; range(10) produces 10 values, which are the acceptable indices for elements in a sequence with length 10. You can provide a different increment—even a negative one; this is frequently referred to as the "step"—or start the range at a different integer
>>> list(range(1,10))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(1,10,2))
[1, 3, 5, 7, 9]
>>> list(range(-10,-100,-20))
[-10, -30, -50, -70, -90]
>>> #if you are to iterate over the indices of a sequence, combine using range() and len() two built-in functions
>>> sequence = ['Python', 'is', 'a', 'high-level', 'programming', 'language']
>>> for i in range(len(sequence)):
...     print(i, a[i])
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'a' is not defined
>>> for i in range(len(sequence)):
...     print(i, sequence[i])
...
0 Python
1 is
2 a
3 high-level
4 programming
5 language



>>> #Break statement
>>> #In the for loop and while loop the break statement breaks out the innermost thing
>>> #it's the proper usage is,if you need some of the outcome is enough from the code you should use break, it'll break the execution while the need thing executed then the rest will terminate
>>> for i in range(3,10):
...     if i%2==0:
...             print(i, " is a First Even number")
...     else:
...             print(i, " is not a Even number")
...
3  is not a Even number
4  is a First Even number
5  is not a Even number
6  is a First Even number
7  is not a Even number
8  is a First Even number
9  is not a Even number
>>> #this how actual code work but if need to end the executi
n after the first two outcome, using break statement we can u
se that,
>>> for i in range(3,10):
...     if i%2==0:
...             print(i, " is a First Even number")
...             break
...     else:
...             print(i, " is not a Even number")
...
3  is not a Even number
4  is a First Even number

>>> #likewise how the continue statement used for
>>> for i in range(3,10):
...     if i%2==0:
...             print(i, " is a First Even number")
...             continue
...     else:
...             print(i, " is not a Even number")
...
3  is not a Even number
4  is a First Even number
5  is not a Even number
6  is a First Even number
7  is not a Even number
8  is a First Even number
9  is not a Even number
>>> #the statement will continue the process after the need output executed

>>> if 2%2==0:
...     pass
...
>>> #pass statement, it does nothing when executed and is typically used as a placeholder where syntactically some code is required, but no action is desired or necessary.
KeyboardInterrupt
>>> def my_func():
...     pass
...
>>> my_func()
>>>
>>> #see it's does nothing, that's how the pass statement works
