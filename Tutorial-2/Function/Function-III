 #arbitrary argument list
>>> #finally, the least frequently used to option is to specify that a function can be called with an arbitrary number of arguments, for example
>>> def no_of_args(*args, sep=" "):
...     return sep.join(args)
...
>>> no_of_args("1","2","3","C","Java","Python")
'1 2 3 C Java Python'
>>> no_of_args("1","2","3","C","Java","Python",sep=",")
'1,2,3,C,Java,Python'
>>> print(no_of_args("1","2","3","C","Java","Python",sep=","))
1,2,3,C,Java,Python
>>> #lambda function, It's a small anonymous function can be created with the lambda keyword . This function can be used wherevers function objects are required . For example,
>>> def add(a):
...     print(lambda b:a+b)
...
>>> x=add_num_using_lambda(5)
>>> x(9)
14
>>> #Document Strings in Function, It will print the document strings in the function . that stores the information of the function and describe what the function does and doesn't, for example
>>> def fun():
...     """ There is No Parameter in the function
...     therefore no argument will take place on this function"""
...     pass
...
>>> print(fun.__doc__)
 There is No Parameter in the function
        therefore no argument will take place on this function
>>> #Function Annotations , It was the optional metadata information about the types used by user-defined function in python function constructor.
>>> # (__annotations__) is a attribute that stores the function annotaions that defined by the user in the function . It's stores data as a dictionary type and don't have any other effect in the function part.
>>> def sum(x:int, y:int) -> str:
...     print(sum.__annotations__)
...
>>> sum(9,8)
{'x': <class 'int'>, 'y': <class 'int'>, 'return': <class 'str'>}
