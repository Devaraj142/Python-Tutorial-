>>> #here we will defining the argument values in the python functions, that are in the 3 forms
>>> #1 default argument values
>>> #2 keyword argument
>>> #3 special parameters
>>>
>>> #1 this form is to specify a default value for one or more arguments and it creates a function that can be called with the fewer arguments,
>>> def ask_ok(prompt, retries=4, reminder='Please try again!'):
...     while True:
...         reply = input(prompt)
...         if reply in {'y', 'ye', 'yes'}:
...             return True
...         if reply in {'n', 'no', 'nop', 'nope'}:
...             return False
...         retries = retries - 1
...         if retries < 0:
...             raise ValueError('invalid user response')
...         print(reminder)
>>> ask_ok('Do you need to write sample test one more')
Do you need to write sample test one morek
Please try again!
Do you need to write sample test one morel
Please try again!
Do you need to write sample test one morem
Please try again!
Do you need to write sample test one moreyes
True


>>> #2 In this form function can also be called using keyword arguments for the  function(keyword=argumnet)
>>> def car_robot(name, speed='5 km/hr', destination='coffee shop'):
...     print('The Agent', name, 'Reach the', destination, 'by', speed, 'speed')
...
>>> #you can call the function and pass the argument by using the keyword like this,
>>> car_robot('finn')
The Agent finn Reach the coffee shop by 5 km/hr speed
>>> car_robot('finn', destination='park')
The Agent finn Reach the park by 5 km/hr speed
>>> car_robot('finn', destination='park', speed='4 km/hr')
The Agent finn Reach the park by 4 km/hr speed

>>> # the above method will be invalid if you use the following commands
>>> car_robot()#argument missing
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: car_robot() missing 1 required positional argument: 'name'
>>> car_robot('finn',name='finn')#duplicate argument with same parameter keyword name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: car_robot() got multiple values for argument 'name'
>>> car_robot(name='finn', '4 km/hr')#non-keyword argument followed by the keyword agrumnet
  File "<stdin>", line 1
    car_robot(name='finn', '4 km/hr')#non-keyword argument followed by the keyword agrumnet
                                    ^
SyntaxError: positional argument follows keyword argument


 #3 i) this is a special arguments pass to function. first (**keywordarguments) in this type of argument, it recives a dictionary containing keyword argumnets, and accepts for those corresponding to a parameter name.
>>> # ii) second (*arguments) in this type of argument, it recives a tuple containing postional arguments beyond the parameter list.
>>> # and the important syntax for declear this you must place it correctly it must be looks like this,
>>> #def fun(*arguments, **keywordarguments) the (*) should appear before (**), let's see the example for this
>>> def shop(name,*arguments,**keywordarguments):
...     print("Hai",name,"sir!")
...     print("How can I help You",name)
...     for argument in arguments:
...         print(argument)
...     print("*"*30)
...     for key in keywordarguments:
...         print(key,":",keywordarguments[key])
...
>>> shop("burg",
...      "I need a cup of coffee",
...      "which one is good",
...      "how much the suit cost?",
...      cookies="5 packets",
...      chicken="4 Kg")
Hai burg sir!
How can I help You burg
I need a cup of coffee
which one is good
how much the suit cost?
******************************
cookies : 5 packets
chicken : 4 Kg
>>>#let get into more clear explaination about what are these special arguments

                                          (A)             (SPECIAL SYMBOL)               (B)            (SPECIAL SYMBOL)                     (C)
special argumenst: -> def fun(position arg1,postion arg2,        /,         postion or keyword argument,       *,              keyword arg1,keyword arg2): 

(A)  :-> if the symbols "/" and "*" are not in the function argumentmay be passed to a function by postional or keyword argument.
(B)  :-> if the parameter is palced before the symbol "/"(forward slash) it is known as postional-only-argument.This is logically seperate the postional-only-arguments from the rest of the parameters.if there is no "/" in the function it's not called as postional-only-arguments.
(c)  :-> if the parameter is palced after the symbol "*"(asterisk) it is known as keyword-only-argument.This is logically seperate the keyword-only-arguments from the rest of the parameter.if there is no"*" in the function it's not called as keyword-only-arguments.

>>> def pos_key(arg):
...     print(arg)
...
>>> def pos_only(arg,/):
...     print(arg)
...
>>> def key_only(*,arg):
...     print(arg)
...
>>> def all(pos_arg,/,pos_key,*,key_arg):
...     print(pos_arg,pos_key,key_arg)
...
>>> pos_key('python')
python
>>> pos_key(arg='python')
python
>>> pos_only('python')
python
>>> pos_only(arg='python')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: pos_only() got some positional-only arguments passed as keyword arguments: 'arg'
>>> key_only(arg='python')
python
>>> key_only('python')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: key_only() takes 0 positional arguments but 1 was given
>>> all('C','python','java')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: all() takes 2 positional arguments but 3 were given
>>> all('C','python',key_arg='java')
C python java
>>> all('C',pos_key='python',key_arg='java')
C python java
>>> all(pos_arg='C',pos_key='python',key_arg='java')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: all() got some positional-only arguments passed as keyword arguments: 'pos_arg'
>>> all('C',pos_key='python',key_arg='java')
C python java
